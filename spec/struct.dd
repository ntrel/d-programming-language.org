Ddoc

$(SPEC_S Structs and Unions,

$(HEADERNAV_TOC)

    $(P Whereas classes are reference types, structs are value types.
    Structs and unions are simple aggregations of data and their
    associated operations on that data.
    )

$(GRAMMAR
$(GNAME AggregateDeclaration):
    $(GLINK2 class, ClassDeclaration)
    $(GLINK2 interface, InterfaceDeclaration)
    $(GLINK StructDeclaration)
    $(GLINK UnionDeclaration)

$(GNAME StructDeclaration):
    $(D struct) $(I Identifier) $(D ;)
    $(D struct) $(I Identifier) $(GLINK AggregateBody)
    $(GLINK2 template, StructTemplateDeclaration)
    $(GLINK AnonStructDeclaration)

$(GNAME AnonStructDeclaration):
    $(D struct) $(GLINK AggregateBody)

$(GNAME UnionDeclaration):
    $(D union) $(I Identifier) $(D ;)
    $(D union) $(I Identifier) $(GLINK AggregateBody)
    $(GLINK2 template, UnionTemplateDeclaration)
    $(GLINK AnonUnionDeclaration)

$(GNAME AnonUnionDeclaration):
    $(D union) $(GLINK AggregateBody)

$(GNAME AggregateBody):
    $(D {) $(GLINK2 module, DeclDefs)$(OPT) $(D })
)

    $(P A struct is defined to not have an identity; that is,
    the implementation is free to make bit copies of the struct
    as convenient.)

    $(P Structs and unions may not contain an instance of themselves,
    however, they may contain a pointer to the same type.
    )

    $(BEST_PRACTICE
    $(OL
    $(LI Bit fields are supported with the
    $(LINK2 https://dlang.org/phobos/std_bitmanip.html#bitfields, bitfields) template.)
    ))


$(H2 $(LNAME2 struct_layout, Struct Layout))

    $(P The non-static data members of a struct are called $(I fields). Fields are laid
    out in lexical order. Fields are aligned according to the $(DDSUBLINK spec/attribute, align, Align Attribute)
    in effect.
    Unnamed padding is inserted between fields to align fields. There is no padding between
    the first field and the start of the object.
    )

    $(P Non-static $(RELATIVE_LINK2 nested, function-nested D structs), which access the context of
    their enclosing scope, have an extra field.
    )

    $(IMPLEMENTATION_DEFINED
    $(OL
    $(LI The default layout of the fields of a struct is an exact
    match with the $(I associated C compiler).)
    ))

    $(UNDEFINED_BEHAVIOR
    $(OL
    $(LI The padding data can be accessed, but its contents are undefined.)
    ))

    $(BEST_PRACTICE
    $(OL
    $(LI When laying out a struct to match an externally defined layout, use align
    attributes to describe an exact match. Using a $(DDSUBLINK spec/version, static-assert, Static Assert)
    to ensure the result is as expected.)
    $(LI Although the contents of the padding are often zero, do not rely on that.)
    ))

$(H2 $(LNAME2 POD, Plain Old Data))

    $(P A struct or union is $(I Plain Old Data) (POD) if it meets the following criteria:)

    $(OL
    $(LI it is not nested)
    $(LI it has no postblits, destructors, or assignment operators)
    $(LI it has no `ref` fields or fields that are themselves non-POD)
    )

    $(BEST_PRACTICE Structs or unions that interface with C code should be POD.)


$(H2 $(LNAME2 opaque_struct_unions, Opaque Structs and Unions))

    $(P Opaque struct and union declarations do not have a $(GLINK AggregateBody):)

---
struct S;
union U;
---

        $(P The members are completely hidden to the user, and so the only operations
        on those types are ones that do not require any knowledge of the contents
        of those types. For example:)

---
struct S;
S.sizeof; // error, size is not known
S s;      // error, cannot initialize unknown contents
S* p;     // ok, knowledge of members is not necessary
---

        $(P They can be used to implement the
        $(LINK2 https://en.wikipedia.org/wiki/Opaque_pointer, PIMPL idiom).)


$(H2 $(LNAME2 static_struct_init, Static Initialization of Structs))

        $(P Static struct members are by default initialized to whatever the
        default initializer for the member is, and if none is supplied, to
        the default initializer for the member's type.
        )

------
struct S { int a = 4; int b; }
static S x; // a is set to 4, b to 0
------

        $(P If a static initializer is supplied, the
        members are initialized by the `memberName:expression` syntax.
        The members may be initialized in any order.
        Initializers for statics must be evaluatable at
        compile time. Members not specified in the initializer list are default
        initialized.
        )

------
struct S { int a, b, c, d = 7; }
static S x = { a:1, b:2 };           // c is set to 0, d to 7
static S z = { c:4, b:5, a:2, d:5 }; // z.a = 2, z.b = 5, z.c = 4, z.d = 5
------

$(P C-style initialization, based on the order of the members in the struct
declaration, is also supported:)

------
static S q = { 1, 2 }; // q.a = 1, q.b = 2, q.c = 0, q.d = 7
------

        $(P The two styles can be combined:)

------
static S q = { 1, d:3 }; // q.a = 1, q.b = 0, q.c = 0, q.d = 3
------

        $(P Struct literals can also be used to initialize statics, but
        they must be evaluable at compile time.)

-----
static S q = S( 1, 2+3 ); // q.a = 1, q.b = 5, q.c = 0, q.d = 7
-----


$(H2 $(LNAME2 static_union_init, Static Initialization of Unions))

$(P Unions are initialized explicitly.)

------
union U { int a; double b; }
static U u = { b : 5.0 }; // u.b = 5.0
------

$(P Other members of the union that overlay the initializer, but occupy more
storage, have the extra storage initialized to zero.)

$(H2 $(LNAME2 dynamic_struct_init, Dynamic Initialization of Structs))

        $(P The $(RELATIVE_LINK2 static_struct_init, static initializer syntax)
        can also be used to initialize non-static variables.
        The initializer need not be evaluable at compile time.)

----
struct S { int a, b, c, d = 7; }

void test(int i)
{
    S q = { 1, b:i }; // q.a = 1, q.b = i, q.c = 0, q.d = 7
}
----

        $(P Structs can be dynamically initialized from another
        value of the same type:)

----
struct S { int a; }
S t;      // default initialized
t.a = 3;
S s = t;  // s.a is set to 3
----

        $(P If $(D opCall) is overridden for the struct, and the struct
        is initialized with a value that is of a different type,
        then the $(D opCall) operator is called:)

----
struct S
{
    int a;

    static S $(CODE_HIGHLIGHT opCall)(int v)
    {
        S s;
        s.a = v;
        return s;
    }

    static S $(CODE_HIGHLIGHT opCall)(S v)
    {
        assert(0);
    }
}

S s = 3; // sets s.a to 3 using S.opCall(int)
S t = s; // sets t.a to 3, S.opCall(S) is not called
----

$(H2 $(LEGACY_LNAME2 StructLiteral, struct-literal, Struct Literals))

        $(P Struct literals consist of the name of the struct followed
        by a parenthesized argument list:)

        ---
        struct S { int x; float y; }

        int foo(S s) { return s.x; }

        foo( S(1, 2) ); // set field x to 1, field y to 2
        ---

        $(P Struct literals are syntactically like function calls.
        If a struct has a member function named $(CODE opCall), then
        struct literals for that struct are not possible. See also
        $(DDSUBLINK spec/operatoroverloading, FunctionCall, opCall operator overloading)
        for the issue workaround.
        It is an error if there are more arguments than fields of
        the struct.
        If there are fewer arguments than fields, the remaining
        fields are initialized with their respective default
        initializers.
        If there are anonymous unions in the struct, only the first
        member of the anonymous union can be initialized with a
        struct literal, and all subsequent non-overlapping fields are default
        initialized.
        )

$(H2 $(LNAME2 struct_properties, Struct Properties))

$(TABLE2 Struct Properties,
$(THEAD Name, Description)
$(TROW $(D .sizeof), Size in bytes of struct)
$(TROW $(D .alignof), Size boundary struct needs to be aligned on)
)

$(H2 $(LNAME2 struct_instance_properties, Struct Instance Properties))

$(TABLE2 Struct Instance Properties,
$(THEAD Name, Description)
$(TROW $(D .tupleof), An $(DDSUBLINK spec/ctarguments, homogenous-lists, lvalue sequence)
    of all struct fields - see
    $(DDSUBLINK spec/class, class_properties, Class Properties) for a class-based example.)
)

$(H2 $(LNAME2 struct_field_properties, Struct Field Properties))

$(TABLE2 Struct Field Properties,
$(THEAD Name, Description)
$(TROW $(D .offsetof), Offset in bytes of field from beginning of struct)
)

$(H2 $(LEGACY_LNAME2 ConstStruct, const-struct, Const, Immutable and Shared Structs))

        $(P A struct declaration can have a storage class of
        $(CODE const), $(CODE immutable) or $(CODE shared). It has an equivalent
        effect as declaring each member of the struct as
        $(CODE const), $(CODE immutable) or $(CODE shared).
        )

        ----
        const struct S { int a; int b = 2; }

        void main()
        {
            S s = S(3); // initializes s.a to 3
            S t;        // initializes t.a to 0
            t = s;      // error, t.a and t.b are const, so cannot modify them.
            t.a = 4;    // error, t.a is const
        }
        ----

$(H2 $(LEGACY_LNAME2 Struct-Constructor, struct-constructor, Struct Constructors))

        $(P Struct constructors are used to initialize an instance
        of a struct.
        The $(I ParameterList) may not be empty.
        Struct instances that are not instantiated with a constructor
        are default initialized to their $(CODE .init) value.
        )

        ------
        struct S
        {
            int x, y;

            this()  // error, cannot implement default ctor for structs
            {
            }

            this(int a, int b)
            {
                x = a;
                y = b;
            }
        }

        void main()
        {
            S a = S(4, 5);
            auto b = S();  // same as auto b = S.init;
        }
        ------

$(COMMENT
$(P Inside a constructor, the first occurrence (in lexical order) of assignments
of the form $(CODE member = expression;) are handled differently than usual
assignments. The first such assignment in lexical order is converted to a
constructor call for the member's type. Example:)

------
import std.stdio;

struct A
{
    this(int x) { writef("A.this(%s)", x); }
}

struct B
{
    A a;
    this(int x)
    {
        write("[= ");
        a = x;
        writeln(" =]");
        // a = x; does not compile here, it already occurred lexically.
    }
}

void main(string[] args)
{
    auto b = B(10);
    // b.a = 10; does not compile here, A does not define opAssign(int).
}
------

$(P The program above prints the line $(CODE "[= A.this(10) =]"). Anywhere else
attempting to assign an integer to an object of type `A` would count as an
assignment (and is not compilable because `A` does not define `opAssign(int)`).)

$(P Finding the first assignment in lexical order is flow-sensitive upon the
`if` statement. Consider a change to struct `B` in the previous example as
follows:)

------
struct B
{
    A a;
    this(int x)
    {
        if (x < 0)
            a = -x;
        else
            a = x;
    }
}
------

$(P This code issues a constructor call on each branch of the `if` statement.
However, such flow sensitivity is limited. There is no static or dynamic
analysis of coverage of the `if` statement. For example:)

------
struct B
{
    A a;
    this(int x)
    {
        if (false) a = 0; // constructor call even if never covered
        a = x; // error, cannot assign
    }
}
------

$(P Also, member assignments inside loops are never considered constructors,
even if it can be determined statically that the loop executes at most once.
Example:)

------
struct B
{
    A a;
    this(int x)
    {
        foreach (i; 0 .. x ? 0 : 1) a = i; // error, cannot assign
    }
}
------

$(P If an exception is thrown at any point from within a constructor,
destructors are called for all members, in reverse lexical order of their
declaration. Members that have not been explicitly initialized in the
constructor will have their `.init` values upon destruction.)
)

        $(P A constructor qualifier allows the object to be constructed with
        that specific qualifier.
        )

        ------
        struct S1
        {
            int[] a;
            this(int n) { a = new int[](n); }
        }
        struct S2
        {
            int[] a;
            this(int n) immutable { a = new int[](n); }
        }
        void main()
        {
            // Mutable constructor creates mutable object.
            S1 m1 = S1(1);

            // Constructed mutable object is implicitly convertible to const.
            const S1 c1 = S1(1);

            // Constructed mutable object is not implicitly convertible to immutable.
            // immutable i1 = S1(1);

            // Mutable constructor cannot construct immutable object.
            // auto x1 = immutable S1(1);

            // Immutable constructor cannot construct mutable object.
            // auto x2 = S2(1);

            // Constructed immutable object is not implicitly convertible to mutable.
            // S2 m2 = immutable S2(1);

            // Constructed immutable object is implicitly convertible to const.
            const S2 c2 = immutable S2(1);

            // Immutable constructor creates immutable object.
            immutable i2 = immutable S2(1);
        }
        ------

        $(P If struct constructor is annotated with $(D @disable) and has
        empty parameter, the struct is disabled construction without calling
        other constructor.
        )
        ------
        struct S
        {
            int x;

            // Disables default construction, function body can be empty.
            @disable this();

            this(int v) { x = v; }
        }
        void main()
        {
            //S s;        // default construction is disabled
            //S s = S();  // also disabled
            S s = S(1);   // construction with calling constructor
        }
        ------

$(H2 $(LEGACY_LNAME2 StructPostblit, struct-postblit, Struct Postblits))

$(GRAMMAR
$(GNAME Postblit):
    $(D this $(LPAREN) this $(RPAREN)) $(GLINK2 function, MemberFunctionAttributes)$(OPT) $(D ;)
    $(D this $(LPAREN) this $(RPAREN)) $(GLINK2 function, MemberFunctionAttributes)$(OPT) $(GLINK2 function, FunctionBody)
)

        $(P $(I Copy construction) is defined as initializing
         a struct instance from another struct of the same type.
         Copy construction is divided into two parts:)

        $(OL
        $(LI blitting the fields, i.e. copying the bits)
        $(LI running $(I postblit) on the result)
        )

        $(P The first part is done automatically by the language,
        the second part is done if a postblit function is defined
        for the struct.
        The postblit has access only to the destination struct object,
        not the source.
        Its job is to $(SINGLEQUOTE fix up) the destination as necessary, such as
        making copies of referenced data, incrementing reference counts,
        etc. For example:
        )

        ---
        struct S
        {
            int[] a;    // array is privately owned by this instance
            this(this)
            {
                a = a.dup;
            }
        }
        ---

        $(P Disabling struct postblit makes the object not copyable.
        )

        ---
        struct T
        {
            @disable this(this);  // disabling makes T not copyable
        }
        struct S
        {
            T t;   // uncopyable member makes S also not copyable
        }

        void main()
        {
            S s;
            S t = s; // error, S is not copyable
        }
        ---

        $(P Unions may not have fields that have postblits.)

$(H2 $(LEGACY_LNAME2 StructDestructor, struct-destructor, Struct Destructors))

        $(P Destructors are called when an object goes out of scope.
        Their purpose is to free up resources owned by the struct
        object.
        )

        $(P Unions may not have fields that have destructors.)

$(H2 $(LNAME2 StructInvariant, Struct Invariants))

$(GRAMMAR
$(GNAME StructInvariant):
    $(D invariant ( )) $(GLINK2 statement, BlockStatement)
    $(D invariant) $(GLINK2 statement, BlockStatement)
)

    $(P $(I StructInvariant)s specify the relationships among the members of a struct instance.
    Those relationships must hold for any interactions with the instance from its
    public interface.
    )

    $(P The invariant is in the form of a $(D const) member function. The invariant is defined
    to $(I hold) if all the $(GLINK2 expression, AssertExpression)s within the invariant that are executed
    succeed.
    )

    $(P If the invariant does not hold, then the program enters an invalid state.)

    $(P Any invariants for fields are applied before the struct invariant.)

    $(P There may be multiple invariants in a struct. They are applied in lexical order.)

    $(P $(I StructInvariant)s must hold at the exit of the struct constructor (if any),
    and at the entry of the struct destructor (if any).)

    $(P $(I StructInvariant)s must hold
    at the entry and exit of all public or exported non-static member functions.
    The order of application of invariants is:
    $(OL
    $(LI preconditions)
    $(LI invariant)
    $(LI function body)
    $(LI invariant)
    $(LI postconditions)
    )
    )

    $(P The invariant need not hold if the struct instance is implicitly constructed using
    the default $(D .init) value.)

    ---
    struct Date
    {
        this(int d, int h)
        {
            day = d;    // days are 1..31
            hour = h;   // hours are 0..23
        }

        invariant
        {
            assert(1 <= day && day <= 31);
            assert(0 <= hour && hour < 24);
        }

      private:
        int day;
        int hour;
    }
    ---

    $(P Public or exported non-static member functions cannot be called from within an invariant.)

    ---
    struct Foo
    {
        public void f() { }
        private void g() { }

        invariant
        {
            f();  // error, cannot call public member function from invariant
            g();  // ok, g() is not public
        }
    }
    ---

    $(UNDEFINED_BEHAVIOR happens if the invariant does not hold and execution continues.)

    $(IMPLEMENTATION_DEFINED
    $(OL
    $(LI Whether the $(I StructInvariant) is executed at runtime or not. This is typically
    controlled with a compiler switch.)
    $(LI The behavior when the invariant does not hold is typically the same as
    for when $(GLINK2 expression, AssertExpression)s fail.)
    )
    )

    $(BEST_PRACTICE
    $(OL
    $(LI Do not indirectly call exported or public member functions within a struct invariant,
    as this can result in infinite recursion.)
    $(LI Avoid reliance on side effects in the invariant. as the invariant may or may not
    be executed.)
    $(LI Avoid having mutable public fields of structs with invariants,
    as then the invariant cannot verify the public interface.)
    )
    )



$(H2 $(LEGACY_LNAME2 AssignOverload, assign-overload, Identity Assignment Overload))

        $(P While copy construction takes care of initializing
        an object from another object of the same type,
        or elaborate destruction is needed for the type,
        assignment is defined as copying the contents of one
        object over another, already initialized, type:
        )

        ---
        struct S { ... }  // S has postblit or destructor
        S s;      // default construction of s
        S t = s;  // t is copy-constructed from s
        t = s;    // t is assigned from s
        ---

        $(P Struct assignment $(CODE t=s) is defined to be semantically
        equivalent to:
        )

        ---
        t.opAssign(s);
        ---

        $(P where $(CODE opAssign) is a member function of S:)

        ---
        ref S opAssign(ref S s)
        {
            S tmp = this;   // bitcopy this into tmp
            this = s;       // bitcopy s into this
            tmp.__dtor();   // call destructor on tmp
            return this;
        }
        ---

        $(P An identity assignment overload is required for a struct if one or more of
        these conditions hold:)

        $(UL
        $(LI it has a $(LINK2 #struct-destructor, destructor))
        $(LI it has a $(LINK2 #struct-postblit, postblit))
        $(LI it has a field with an identity assignment overload)
        )

        $(P If an identity assignment overload is required and does not
        exist, an identity assignment overload function of the type
        $(CODE ref S opAssign(ref S))  will be automatically generated.)

        $(P A user-defined one can implement the equivalent semantics, but can
        be more efficient.
        )

        $(P One reason a custom $(CODE opAssign) might be more efficient
        is if the struct has a reference to a local buffer:
        )

        ---
        struct S
        {
            int[] buf;
            int a;

            ref S opAssign(ref const S s)
            {
                a = s.a;
                return this;
            }

            this(this)
            {
                buf = buf.dup;
            }
        }
        ---

        $(P Here, $(CODE S) has a temporary workspace $(CODE buf[]).
        The normal postblit
        will pointlessly free and reallocate it. The custom $(CODE opAssign)
        will reuse the existing storage.
        )

$(H2 $(LNAME2 nested, Nested Structs))

    $(P A $(I nested struct) is a struct that is declared inside the scope
        of a function or a templated struct that has aliases to local
        functions as a template argument.
        Nested structs have member functions.
        It has access to the context of its enclosing scope
        (via an added hidden field).)

        ---
        void foo()
        {
            int i = 7;
            struct SS
            {
                int x,y;
                int bar() { return x + i + 1; }
            }
            SS s;
            s.x = 3;
            s.bar(); // returns 11
        }
        ---

    $(P A struct can be prevented from being nested by
        using the static attribute, but then of course it
        will not be able to access variables from its enclosing
        scope.)

        ---
        void foo()
        {
            int i = 7;
            static struct SS
            {
                int x, y;
                int bar()
                {
                    return i; // error, SS is not a nested struct
                }
            }
        }
        ---

$(H2 $(LNAME2 unions_and_special_memb_funct, Unions and Special Member Functions))

    $(P Unions may not have postblits, destructors, or invariants.)

$(SPEC_SUBNAV_PREV_NEXT hash-map, Associative Arrays, class, Classes)
)

Macros:
        CHAPTER=14
        TITLE=Structs, Unions
        UNCHECK=
        CHECK=$(CHECKMARK)
        _=
